{"ast":null,"code":"import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanc\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","constructor","props","createBoard","board","flipCellsAround","coord","ncols","nrows","state","y","x","split","map","Number","flipCell","render","defaultProps","chanc"],"sources":["/Users/austinsmith/Documents/Udemy/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanc\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({ board, hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n\n\n  }\n}\n\n\nexport default Board;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,SAASF,SAAS,CAAC;EAM5BG,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;EACF;;EAEA;;EAEAC,WAAWA,CAAA,EAAG;IACZ,IAAIC,KAAK,GAAG,EAAE;IACd;IACA,OAAOA,KAAK;EACd;;EAEA;;EAEAC,eAAeA,CAACC,KAAK,EAAE;IACrB,IAAI;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACN,KAAK;IACjC,IAAIE,KAAK,GAAG,IAAI,CAACK,KAAK,CAACL,KAAK;IAC5B,IAAI,CAACM,CAAC,EAAEC,CAAC,CAAC,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IAGzC,SAASC,QAAQA,CAACL,CAAC,EAAEC,CAAC,EAAE;MACtB;;MAEA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGJ,KAAK,IAAIG,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGF,KAAK,EAAE;QAC9CJ,KAAK,CAACM,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACP,KAAK,CAACM,CAAC,CAAC,CAACC,CAAC,CAAC;MAC5B;IACF;;IAEA;;IAEA;IACA;;IAEA;EACF;;EAGA;;EAEAK,MAAMA,CAAA,EAAG;;IAEP;;IAEA;;IAEA;;IAEA;EAAA;AAIJ;AA3DMhB,KAAK,CACFiB,YAAY,GAAG;EACpBT,KAAK,EAAE,CAAC;EACRD,KAAK,EAAE,CAAC;EACRW;AACF,CAAC;AAyDH,eAAelB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}