{"ast":null,"code":"var _jsxFileName = \"/Users/austinsmith/Documents/Udemy/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({\n      board: board,\n      hasWon: hasWon\n    });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"YOU WON!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this);\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = \"\".concat(y, \"-\").concat(x);\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: this.state.board[y][x],\n          flipCellsAroundMe: () => this.flipCellsAround(coord)\n        }, coord, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 18\n        }, this));\n      }\n      tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this));\n    }\n    // TODO\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tblBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n}\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","jsxDEV","_jsxDEV","Board","constructor","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","concat","isLit","flipCellsAroundMe","className","defaultProps"],"sources":["/Users/austinsmith/Documents/Udemy/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return <h1>YOU WON!!!</h1>\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={() => this.flipCellsAround(coord)} />)\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n    // TODO\n    return (\n      <div>\n        <div className=\"board-title\"></div>\n        <table className=\"Board\">\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}